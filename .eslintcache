[{"/Users/simonhales/WebstormProjects/ducklings-game/src/index.tsx":"1","/Users/simonhales/WebstormProjects/ducklings-game/src/components/Game/Game.tsx":"2","/Users/simonhales/WebstormProjects/ducklings-game/src/utils/numbers.ts":"3","/Users/simonhales/WebstormProjects/ducklings-game/src/components/Game/components/Lights/Lights.tsx":"4","/Users/simonhales/WebstormProjects/ducklings-game/src/3d/Water/Water.tsx":"5","/Users/simonhales/WebstormProjects/ducklings-game/src/components/Game/components/Camera/hooks/useFollow.ts":"6","/Users/simonhales/WebstormProjects/ducklings-game/src/global/state/refs.ts":"7","/Users/simonhales/WebstormProjects/ducklings-game/src/global/state/ducklings.ts":"8","/Users/simonhales/WebstormProjects/ducklings-game/src/physics/components/Physics/hooks.ts":"9","/Users/simonhales/WebstormProjects/ducklings-game/src/components/Game/components/Ducklings/components/Duckling/hooks/useBrain.ts":"10","/Users/simonhales/WebstormProjects/ducklings-game/src/workers/physics/functions.ts":"11","/Users/simonhales/WebstormProjects/ducklings-game/src/components/Game/components/Player/Player.tsx":"12","/Users/simonhales/WebstormProjects/ducklings-game/src/components/Game/components/Ducklings/components/Duckling/Duckling.tsx":"13","/Users/simonhales/WebstormProjects/ducklings-game/src/components/Game/components/Ducklings/components/Duckling/hooks/usePhysics.ts":"14","/Users/simonhales/WebstormProjects/ducklings-game/src/components/Game/components/TargetHelper/TargetHelper.tsx":"15","/Users/simonhales/WebstormProjects/ducklings-game/src/components/Game/components/Ducklings/Ducklings.tsx":"16","/Users/simonhales/WebstormProjects/ducklings-game/src/physics/components/Physics/Physics.tsx":"17","/Users/simonhales/WebstormProjects/ducklings-game/src/App.tsx":"18","/Users/simonhales/WebstormProjects/ducklings-game/src/components/Game/components/Player/components/PlayerUIHelper/PlayerUIHelper.tsx":"19","/Users/simonhales/WebstormProjects/ducklings-game/src/physics/components/Physics/worker.ts":"20","/Users/simonhales/WebstormProjects/ducklings-game/src/physics/bodies.ts":"21","/Users/simonhales/WebstormProjects/ducklings-game/src/physics/collisions/data.ts":"22","/Users/simonhales/WebstormProjects/ducklings-game/src/components/Game/components/GameCanvas/GameCanvas.tsx":"23","/Users/simonhales/WebstormProjects/ducklings-game/src/components/Game/components/Camera/Camera.tsx":"24","/Users/simonhales/WebstormProjects/ducklings-game/src/global/state/player.ts":"25","/Users/simonhales/WebstormProjects/ducklings-game/src/components/Game/components/Player/hooks/useController.ts":"26","/Users/simonhales/WebstormProjects/ducklings-game/src/workers/physics/types.ts":"27","/Users/simonhales/WebstormProjects/ducklings-game/src/physics/shared.ts":"28","/Users/simonhales/WebstormProjects/ducklings-game/src/components/Game/components/Ducklings/state/targets.ts":"29","/Users/simonhales/WebstormProjects/ducklings-game/src/workers/physics/index.ts":"30","/Users/simonhales/WebstormProjects/ducklings-game/src/workers/logic/index.ts":"31","/Users/simonhales/WebstormProjects/ducklings-game/src/physics/components/PhysicsProvider/PhysicsProvider.tsx":"32","/Users/simonhales/WebstormProjects/ducklings-game/src/components/Game/components/Inputs/Inputs.tsx":"33","/Users/simonhales/WebstormProjects/ducklings-game/src/components/Game/components/Player/state/inputs.ts":"34","/Users/simonhales/WebstormProjects/ducklings-game/src/components/Game/components/Ducklings/shared.ts":"35","/Users/simonhales/WebstormProjects/ducklings-game/src/components/Game/components/Player/hooks/usePhysics.ts":"36","/Users/simonhales/WebstormProjects/ducklings-game/src/physics/components/Physics/data.ts":"37","/Users/simonhales/WebstormProjects/ducklings-game/src/3d/Duck/Duck.tsx":"38","/Users/simonhales/WebstormProjects/ducklings-game/src/physics/components/PhysicsProvider/context.ts":"39"},{"size":500,"mtime":1608030846327,"results":"40","hashOfConfig":"41"},{"size":548,"mtime":1608043210653,"results":"42","hashOfConfig":"41"},{"size":1068,"mtime":1608030846332,"results":"43","hashOfConfig":"41"},{"size":176,"mtime":1608030846324,"results":"44","hashOfConfig":"41"},{"size":763,"mtime":1608111286174,"results":"45","hashOfConfig":"41"},{"size":1622,"mtime":1608030846321,"results":"46","hashOfConfig":"41"},{"size":939,"mtime":1608101000596,"results":"47","hashOfConfig":"41"},{"size":2897,"mtime":1608108826285,"results":"48","hashOfConfig":"41"},{"size":5619,"mtime":1608127101288,"results":"49","hashOfConfig":"41"},{"size":13140,"mtime":1608110456970,"results":"50","hashOfConfig":"41"},{"size":970,"mtime":1608030846333,"results":"51","hashOfConfig":"41"},{"size":988,"mtime":1608111559182,"results":"52","hashOfConfig":"41"},{"size":2105,"mtime":1608126620589,"results":"53","hashOfConfig":"41"},{"size":637,"mtime":1608101583768,"results":"54","hashOfConfig":"41"},{"size":547,"mtime":1608102237575,"results":"55","hashOfConfig":"41"},{"size":1272,"mtime":1608110712878,"results":"56","hashOfConfig":"41"},{"size":3263,"mtime":1608126083981,"results":"57","hashOfConfig":"41"},{"size":190,"mtime":1608030846319,"results":"58","hashOfConfig":"41"},{"size":988,"mtime":1608030846325,"results":"59","hashOfConfig":"41"},{"size":1762,"mtime":1608119799545,"results":"60","hashOfConfig":"41"},{"size":7548,"mtime":1608030846328,"results":"61","hashOfConfig":"41"},{"size":76,"mtime":1608030846329,"results":"62","hashOfConfig":"41"},{"size":701,"mtime":1608101000593,"results":"63","hashOfConfig":"41"},{"size":999,"mtime":1608030846320,"results":"64","hashOfConfig":"41"},{"size":109,"mtime":1608030846327,"results":"65","hashOfConfig":"41"},{"size":1645,"mtime":1608030846325,"results":"66","hashOfConfig":"41"},{"size":223,"mtime":1608030846334,"results":"67","hashOfConfig":"41"},{"size":534,"mtime":1608030846331,"results":"68","hashOfConfig":"41"},{"size":263,"mtime":1608101000592,"results":"69","hashOfConfig":"41"},{"size":3492,"mtime":1608127662184,"results":"70","hashOfConfig":"41"},{"size":1144,"mtime":1608124084864,"results":"71","hashOfConfig":"41"},{"size":1862,"mtime":1608126164087,"results":"72","hashOfConfig":"41"},{"size":3298,"mtime":1608101000594,"results":"73","hashOfConfig":"41"},{"size":181,"mtime":1608030846326,"results":"74","hashOfConfig":"41"},{"size":527,"mtime":1608103233346,"results":"75","hashOfConfig":"41"},{"size":598,"mtime":1608043059943,"results":"76","hashOfConfig":"41"},{"size":1759,"mtime":1608030846330,"results":"77","hashOfConfig":"41"},{"size":824,"mtime":1608030846318,"results":"78","hashOfConfig":"41"},{"size":612,"mtime":1608122664665,"results":"79","hashOfConfig":"41"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"1wfwerx",{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"82"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"82"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"82"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"82"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"108"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"82"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"82"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"126"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"82"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"157","messages":"158","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/simonhales/WebstormProjects/ducklings-game/src/index.tsx",[],["171","172"],"/Users/simonhales/WebstormProjects/ducklings-game/src/components/Game/Game.tsx",[],"/Users/simonhales/WebstormProjects/ducklings-game/src/utils/numbers.ts",[],"/Users/simonhales/WebstormProjects/ducklings-game/src/components/Game/components/Lights/Lights.tsx",[],"/Users/simonhales/WebstormProjects/ducklings-game/src/3d/Water/Water.tsx",["173","174"],"import { Plane } from \"@react-three/drei\";\nimport React from \"react\";\nimport {useTweaks} from \"use-tweaks\";\nimport {radians} from \"../../utils/angles\";\n\nconst Water: React.FC = () => {\n\n    // const { color, y } = useTweaks({\n    //     color: {\n    //         r: 255,\n    //         g: 255,\n    //         b: 0,\n    //         a: 1,\n    //     },\n    //     y: 0.2,\n    // });\n    //\n    // const colorString = `rgb(${Math.round(color.r)},${Math.round(color.g)},${Math.round(color.b)})`\n\n    return (\n        <>\n            <Plane args={[20, 20]} receiveShadow>\n                <meshPhongMaterial color={`#223f56`} />\n            </Plane>\n            {/*<gridHelper args={[20, 20]} rotation={[radians(90), 0, 0]}/>*/}\n        </>\n    );\n};\n\nexport default Water;","/Users/simonhales/WebstormProjects/ducklings-game/src/components/Game/components/Camera/hooks/useFollow.ts",[],"/Users/simonhales/WebstormProjects/ducklings-game/src/global/state/refs.ts",["175","176","177"],"import {Object3D} from \"three\";\nimport {MutableRefObject, useEffect, useLayoutEffect} from \"react\";\nimport {proxy, useProxy} from \"valtio\";\n\nexport const playerGroupRef = {\n    ref: new Object3D(),\n}\n\nconst refsMap = new Map<string, {\n    current: Object3D,\n}>()\n\nexport const setRef = (key: string, object: Object3D) => {\n    if (refsMap.has(key)) {\n        const ref = refsMap.get(key)\n        if (ref) {\n            ref.current = object\n            return\n        }\n    }\n    refsMap.set(key, {\n        current: object,\n    })\n}\n\nexport const getStoredRef = (key: string): MutableRefObject<Object3D> | null => {\n    return refsMap.get(key) ?? null\n}\n\nexport const removeRef = (key: string) => {\n    refsMap.delete(key)\n}\n\nexport const useStoreRef = (key: string, object: Object3D) => {\n\n    useLayoutEffect(() => {\n        setRef(key, object)\n        // return () => {\n        //     removeRef(key)\n        // }\n    }, [key, object])\n\n}","/Users/simonhales/WebstormProjects/ducklings-game/src/global/state/ducklings.ts",["178","179"],"import create from \"zustand\";\n\nconst ducklingPositions = {\n    0: ['A'],\n    1: ['B'],\n    2: ['C'],\n    3: ['D'],\n    4: ['E'],\n}\n\nconst ducklingDesiredPositions = {\n    0: ['E'],\n    1: [],\n    2: [],\n    3: [],\n    4: [],\n}\n\n/*\n\nduckling has a position\n\nif it thinks it's easier to move to a higher position, it'll do that\n\na duckling follows the position of the duckling in front of it\n\ncan only follow a lower number position\n\nwhen changing position, notify its intention to other ducklings\n\n\n\n */\n\n\n\nexport type DucklingData = {\n    id: string,\n    position: number | null,\n}\n\nconst ducks: {\n    [key: string]: DucklingData\n} = {\n    'A' : {\n        id: `A`,\n        position: 0,\n    },\n    'B' : {\n        id: `B`,\n        position: 1,\n    },\n    'C' : {\n        id: `C`,\n        position: 2,\n    },\n    'D' : {\n        id: `D`,\n        position: 3,\n    },\n    'E' : {\n        id: `E`,\n        position: 4,\n    }\n}\n\ntype DucklingsStore = {\n    ducklings: {\n        [key: string]: DucklingData,\n    },\n    updateDucklingPosition: (ducklingKey: string, newPosition: number) => void,\n}\n\nexport const useDucklingsStore = create<DucklingsStore>(set => ({\n    ducklings: ducks,\n    updateDucklingPosition: (ducklingKey, newPosition) => {\n        return set(state => {\n            const ducklings = state.ducklings\n            const orderedDucklings = Object.values(ducklings).sort((ducklingA, ducklingB) => {\n                return (ducklingA.position ?? 999) - (ducklingB.position ?? 999)\n            })\n\n            const currentPosition = ducklings[ducklingKey].position as number\n\n            if (currentPosition <= newPosition) {\n                console.log('no difference?')\n                return {}\n            }\n\n            const numberOfFollowingDucklings = orderedDucklings.length - 1 - currentPosition\n\n            for (let i = newPosition; i < currentPosition; i++) {\n                if (orderedDucklings[i].position != null) {\n                    orderedDucklings[i].position = (orderedDucklings[i].position as number) + numberOfFollowingDucklings\n                }\n            }\n\n            const difference = currentPosition - newPosition\n\n            for (let i = currentPosition; i < orderedDucklings.length - 1; i++) {\n                if (orderedDucklings[i].position != null) {\n                    orderedDucklings[i].position = (orderedDucklings[i].position as number) - difference\n                }\n            }\n\n            const reorderedDucklings = orderedDucklings.sort((ducklingA, ducklingB) => {\n                return (ducklingA.position ?? 999) - (ducklingB.position ?? 999)\n            })\n\n            reorderedDucklings.forEach((duckling, index) => {\n                ducklings[duckling.id].position = index\n            })\n\n            return {\n                ducklings: {\n                    ...ducklings,\n                },\n            }\n        })\n    },\n}))","/Users/simonhales/WebstormProjects/ducklings-game/src/physics/components/Physics/hooks.ts",["180","181","182","183","184","185","186","187"],"/Users/simonhales/WebstormProjects/ducklings-game/src/components/Game/components/Ducklings/components/Duckling/hooks/useBrain.ts",["188","189","190","191","192","193","194","195","196","197","198"],"import {MutableRefObject, useCallback, useEffect, useMemo, useRef, useState} from \"react\";\nimport {Object3D} from \"three\";\nimport {useFrame} from \"react-three-fiber\";\nimport {getStoredRef} from \"../../../../../../../global/state/refs\";\nimport {radians} from \"../../../../../../../utils/angles\";\nimport {lerpRadians, numLerp, PI, PI_TIMES_TWO} from \"../../../../../../../utils/numbers\";\nimport {BodyApi} from \"../../../../../../../physics/components/Physics/hooks\";\nimport {Vec2} from \"planck-js\";\nimport {ducklingTargets} from \"../../../state/targets\";\nimport {getClosestDuckRefKey, getSortedDucklings} from \"../../../shared\";\nimport {useDucklingsStore} from \"../../../../../../../global/state/ducklings\";\nimport {getDucklingTargetRefKey} from \"../Duckling\";\n\nlet tick = 0\n\nconst vector = Vec2(0, 0)\n\nconst calculateCheapDistance = (x: number, x2: number, y: number, y2: number): number => {\n    return Math.pow(Math.abs(x - x2), 2) + Math.pow(Math.abs(y - y2), 2)\n}\n\nlet odd = false\n\nexport const useBrain = (ducklingKey: string,\n                         ref: MutableRefObject<Object3D>,\n                         followRefKey: string,\n                         api: BodyApi,\n                         targetRef: MutableRefObject<Object3D>,\n                         extendedTargetRef: MutableRefObject<Object3D>,\n                         position: number | null,\n                         debug: boolean,) => {\n\n    const updateDucklingPosition = useDucklingsStore(state => state.updateDucklingPosition)\n\n    const localStateRef = useRef<{\n        previousMeshX: number,\n        previousMeshY: number,\n        previousXVel: number,\n        previousYVel: number,\n        previousX: number,\n        previousY: number,\n        previousXDir: number,\n        previousYDir: number,\n        previousTargetX: number,\n        previousTargetY: number,\n        requestedPosition: null | number,\n        requestedPositionTimestamp: number,\n        positionCooldown: number,\n        lerpedTargetX: number,\n        lerpedTargetY: number,\n    }>({\n        previousX: 0,\n        previousY: 0,\n        previousXVel: 0,\n        previousYVel: 0,\n        previousMeshX: 0,\n        previousMeshY: 0,\n        previousXDir: 0,\n        previousYDir: 0,\n        previousTargetX: 0,\n        previousTargetY: 0,\n        requestedPosition: null,\n        requestedPositionTimestamp: 0,\n        positionCooldown: 0,\n        lerpedTargetX: 0,\n        lerpedTargetY: 0,\n    })\n\n    const [tempTargetKey, setTempTargetKey] = useState(\"\")\n    const [tempTarget, setTempTarget] = useState<Object3D | null>(null)\n    const [tempPosition, setTempPosition] = useState<number | null>(null)\n    const [initChain, setInitChain] = useState(false)\n\n    useEffect(() => {\n        setTimeout(() => {\n            setInitChain(true)\n        }, 50)\n    }, [])\n\n    const clearTempTarget = useCallback(() => {\n        setTempTargetKey('')\n        setTempTarget(null)\n        setTempPosition(null)\n        localStateRef.current.requestedPosition = null\n        localStateRef.current.positionCooldown = Date.now()\n    }, [])\n\n    useEffect(() => {\n        console.log('new? position', position)\n        clearTempTarget()\n    }, [position])\n\n    const ducklingsInChain = useMemo(() => {\n\n        let chain: {\n            ref: MutableRefObject<Object3D>,\n            refKey: string,\n            position: number,\n        }[] = []\n\n        if (position != null) {\n            const ducklings = useDucklingsStore.getState().ducklings\n            const sortedDucklings = getSortedDucklings(ducklings)\n            sortedDucklings.forEach((duckling, index) => {\n                if (duckling.position != null && duckling.position < position) {\n                    const ducklingRefKey = getDucklingTargetRefKey(duckling.id)\n                    const ducklingRef = getStoredRef(ducklingRefKey)\n                    if (ducklingRef) {\n                        chain.push({\n                            ref: ducklingRef,\n                            refKey: ducklingRefKey,\n                            position: duckling.position,\n                        })\n                    }\n                }\n            })\n        }\n\n        return chain\n\n    }, [position, initChain])\n\n    const setNewTempTarget = useCallback((position: number) => {\n        console.log('setNewTempTarget', position)\n        const ducklings = useDucklingsStore.getState().ducklings\n        const sortedDucklings = getSortedDucklings(ducklings)\n        const targetRefKey = getClosestDuckRefKey(position, sortedDucklings)\n        const targetRef = getStoredRef(targetRefKey)\n        if (targetRef && targetRef.current) {\n            setTempTargetKey(targetRefKey)\n            setTempTarget(targetRef.current)\n            setTempPosition(position)\n            localStateRef.current.requestedPositionTimestamp = Date.now()\n        } else {\n            setTempTargetKey(\"\")\n            setTempTarget(null)\n            setTempPosition(null)\n        }\n    }, [])\n\n    const changePosition = useCallback((newPosition: number) => {\n        console.log('changePosition', newPosition)\n        updateDucklingPosition(ducklingKey, newPosition)\n    }, [updateDucklingPosition, ducklingKey])\n\n\n    // useEffect(() => {\n    //\n    //     if (debug) {\n    //         setInterval(() => {\n    //             odd = !odd\n    //             changePosition(odd ? 0 : 3)\n    //         }, 5000)\n    //     }\n    //\n    // }, [debug])\n\n\n    const checkForCloseToTempTarget = useCallback(() => {\n\n        if (!tempTarget || tempPosition == null) return\n\n        if (localStateRef.current.requestedPositionTimestamp < Date.now() - 2000) {\n            console.log('time is up...')\n            clearTempTarget()\n            return\n        }\n\n        if (localStateRef.current.requestedPosition === tempPosition) {\n            return\n        }\n\n        const currentX = ref.current.position.x\n        const currentY = ref.current.position.y\n\n        const targetX = tempTarget.position.x\n        const targetY = tempTarget.position.y\n\n        const currentDistance = calculateCheapDistance(currentX, targetX, currentY, targetY)\n\n        if (currentDistance < 1) {\n            console.log('close enough so im claiming it...')\n            changePosition(tempPosition)\n            localStateRef.current.requestedPosition = tempPosition\n        }\n\n    }, [tempTarget, tempPosition, changePosition, clearTempTarget])\n\n    const checkForCloserTarget = useCallback((currentTargetX: number, currentTargetY: number) => {\n\n        if (localStateRef.current.positionCooldown > Date.now() - 2000) {\n            return\n        }\n\n        const currentX = ref.current.position.x\n        const currentY = ref.current.position.y\n\n        const currentDistance = calculateCheapDistance(currentX, currentTargetX, currentY, currentTargetY)\n\n        if (currentDistance > 2.5) {\n            ducklingsInChain.forEach(({ref: ducklingRef, position: ducklingPosition}) => {\n                const ducklingDistance = calculateCheapDistance(currentX, ducklingRef.current.position.x, currentY, ducklingRef.current.position.y)\n                if (ducklingDistance < currentDistance) {\n                    const difference = currentDistance - ducklingDistance\n                    if (difference > 1.5) {\n                        setNewTempTarget(ducklingPosition)\n                    }\n                }\n            })\n        }\n\n\n    }, [ducklingsInChain])\n\n    const moveTowardsTarget = useCallback((followObject: Object3D, targetRefKey: string, delta: number, tempTarget: boolean = false) => {\n\n        const tickDebug = tick % 20 === 0\n\n        if (debug) {\n            tick += 1\n        }\n\n        const movedXDiff = Math.abs(ref.current.position.x - localStateRef.current.previousMeshX)\n        const movedYDiff = Math.abs(ref.current.position.y - localStateRef.current.previousMeshY)\n\n        if (movedXDiff > 3 || movedYDiff > 3) {\n            console.log('movedXDiff', movedXDiff, movedYDiff, localStateRef.current.previousXVel, localStateRef.current.previousYVel)\n        }\n\n        localStateRef.current.previousMeshX = ref.current.position.x\n        localStateRef.current.previousMeshY = ref.current.position.y\n\n\n        const localState = localStateRef.current\n\n        let targetX = followObject.position.x\n        let targetY = followObject.position.y\n\n        let followAngle = followObject.rotation.z\n        if (followAngle > PI) {\n            followAngle -= PI_TIMES_TWO\n        }\n\n        const followXDir = Math.sin(followAngle)\n        const followYDir = Math.cos(followAngle)\n\n        const offset = targetRefKey === 'player' ? 1 : 0.5\n\n        targetX += followXDir * offset\n        targetY += followYDir * -1 * offset\n\n        // targetX = numLerp(targetX, localStateRef.current.lerpedTargetX, 55 * delta)\n        // targetY = numLerp(targetY, localStateRef.current.lerpedTargetY, 55 * delta)\n        //\n        // localStateRef.current.lerpedTargetX = targetX\n        // localStateRef.current.lerpedTargetY = targetY\n\n        const extendedTargetX = targetX + (followXDir * 0.33)\n        const extendedTargetY = targetY + (followYDir * -1 * 0.33)\n\n        extendedTargetRef.current.position.x = extendedTargetX\n        extendedTargetRef.current.position.y = extendedTargetY\n\n\n        const moveXDiff = targetX - ref.current.position.x\n        const moveYDiff = targetY - ref.current.position.y\n\n        const moveAverage = (Math.abs(moveXDiff) + Math.abs(moveYDiff)) / 2\n\n        const moveFactor = numLerp(0.25, 0.75, moveAverage < 1 ? moveAverage : 1)\n\n        // const vectorAngle = followObject.rotation.z\n        let vectorAngle = Math.atan2(moveYDiff, moveXDiff) - radians(90)\n        vectorAngle = lerpRadians(followAngle, vectorAngle, moveFactor)\n\n        if (vectorAngle > PI) {\n            vectorAngle -= PI_TIMES_TWO\n        }\n\n        let prevAngle = ref.current.rotation.z // convert to low equivalent angle\n        if (prevAngle > PI) {\n            prevAngle -= PI_TIMES_TWO\n        }\n\n        api.setAngle(lerpRadians(vectorAngle, prevAngle, 50 * delta))\n\n        const xDir = Math.sin(vectorAngle)\n        const yDir = Math.cos(vectorAngle)\n\n        const xDiff = xDir - localState.previousXDir\n        const yDiff = yDir - localState.previousYDir\n        const xDiffCalc = Math.abs(xDiff * 1000 * delta)\n        const yDiffCalc = Math.abs(yDiff * 1000 * delta)\n\n        localState.previousXDir = xDir\n        localState.previousYDir = yDir\n\n        const adjustedXDir = numLerp(xDir, localState.previousXDir, 55 * delta)\n        const adjustedYDir = numLerp(yDir, localState.previousYDir, 55 * delta)\n\n        localState.previousXDir = adjustedXDir\n        localState.previousYDir = adjustedYDir\n\n        targetRef.current.position.x = targetX\n        targetRef.current.position.y = targetY\n\n        if (position != null) {\n            ducklingTargets[position].x = targetX\n            ducklingTargets[position].y = targetY\n        }\n\n        let xValue = Math.floor(Math.abs(moveXDiff) * 1000) / 1000\n\n        if (xValue > 2) {\n            xValue = 2\n        }\n\n        let xVel = Math.pow(xValue, 1.75)\n\n        let yValue = Math.floor(Math.abs(moveYDiff) * 1000) / 1000\n\n        if (yValue > 2) {\n            yValue = 2\n        }\n\n        let yVel = Math.pow(yValue, 1.75)\n\n        if (moveXDiff < 0) {\n            xVel *= -1\n        }\n\n        if (moveYDiff < 0) {\n            yVel *= -1\n        }\n\n        xVel = xVel * 2\n        yVel = yVel * 2\n\n        vector.set(xVel, yVel)\n\n        api.applyForceToCenter(vector)\n\n        localState.previousTargetX = targetX\n        localState.previousTargetY = targetY\n        localState.previousX = followObject.position.x\n        localState.previousY = followObject.position.y\n        localState.previousXVel = xVel\n        localState.previousYVel = yVel\n\n        const currentDistance = calculateCheapDistance(ref.current.position.x, targetX, ref.current.position.y, targetY)\n\n        // if (debug) {\n        //     if (currentDistance > 1) {\n        //         console.log('currentDistance', currentDistance)\n        //     }\n        // }\n\n        if (!tempTarget) {\n            checkForCloserTarget(targetX, targetY)\n        } else {\n            checkForCloseToTempTarget()\n        }\n\n    }, [checkForCloserTarget, checkForCloseToTempTarget])\n\n    const onFrame = useCallback((state: any, delta: number) => {\n\n        if (tempTarget) {\n            return moveTowardsTarget(tempTarget, tempTargetKey, delta, true)\n        }\n\n        if (!followRef.current) {\n            followRef.current = getStoredRef(followRefKey)\n        }\n        const followObject = followRef.current?.current\n        if (!followObject) {\n            console.log('no follow object?', followRefKey)\n            return\n        }\n        return moveTowardsTarget(followObject, followRefKey, delta)\n\n    }, [tempTarget, tempTargetKey, moveTowardsTarget])\n\n    const followRef = useRef<MutableRefObject<Object3D> | null>(getStoredRef(followRefKey))\n\n    useEffect(() => {\n        followRef.current = getStoredRef(followRefKey)\n        console.log('followRefKey changed', followRefKey)\n    }, [followRefKey])\n\n    useFrame(onFrame)\n\n}","/Users/simonhales/WebstormProjects/ducklings-game/src/workers/physics/functions.ts",["199"],"import {WorkerOwnerMessageType} from \"./types\";\nimport {dynamicBodiesUuids, updateBodiesLastUpdated} from \"../../physics/shared\";\n\n/* eslint-disable-next-line no-restricted-globals */\nconst selfWorker = self as unknown as Worker\n\nexport const syncBodies = () => {\n    updateBodiesLastUpdated()\n    /*selfWorker.postMessage(({\n        type: WorkerOwnerMessageType.SYNC_BODIES,\n        bodies: dynamicBodiesUuids\n    }))*/\n}\n\nexport const sendCollisionBeginEvent = (uuid: string, data: any, fixtureIndex: number) => {\n    selfWorker.postMessage(({\n        type: WorkerOwnerMessageType.BEGIN_COLLISION,\n        props: {\n            uuid,\n            data,\n            fixtureIndex,\n        }\n    }))\n}\n\nexport const sendCollisionEndEvent = (uuid: string, data: any, fixtureIndex: number) => {\n    selfWorker.postMessage(({\n        type: WorkerOwnerMessageType.END_COLLISION,\n        props: {\n            uuid,\n            data,\n            fixtureIndex,\n        }\n    }))\n}",["200","201"],"/Users/simonhales/WebstormProjects/ducklings-game/src/components/Game/components/Player/Player.tsx",["202","203","204"],"import React, {useLayoutEffect, useRef} from \"react\";\nimport Duck from \"../../../../3d/Duck/Duck\";\nimport {useController} from \"./hooks/useController\";\nimport {Object3D} from \"three\";\nimport {usePhysics} from \"./hooks/usePhysics\";\nimport {playerGroupRef, useStoreRef} from \"../../../../global/state/refs\";\nimport PlayerUIHelper from \"./components/PlayerUIHelper/PlayerUIHelper\";\nimport { Box } from \"@react-three/drei\";\nimport TargetHelper from \"../TargetHelper/TargetHelper\";\nimport {getDucklingTargetHelperRefKey} from \"../Ducklings/components/Duckling/Duckling\";\n\nconst Player: React.FC = () => {\n\n    const ref = useRef<Object3D>(null as unknown as Object3D)\n\n    useLayoutEffect(() => {\n        playerGroupRef.ref = ref.current\n    }, [])\n\n    const [api] = usePhysics(ref)\n\n    useStoreRef(\"player\", ref.current)\n\n    useController(ref, api)\n\n    return (\n        <group ref={ref}>\n            <Duck/>\n            <PlayerUIHelper/>\n        </group>\n    );\n};\n\nexport default Player;","/Users/simonhales/WebstormProjects/ducklings-game/src/components/Game/components/Ducklings/components/Duckling/Duckling.tsx",["205"],"/Users/simonhales/WebstormProjects/ducklings-game/src/components/Game/components/Ducklings/components/Duckling/hooks/usePhysics.ts",[],"/Users/simonhales/WebstormProjects/ducklings-game/src/components/Game/components/TargetHelper/TargetHelper.tsx",[],"/Users/simonhales/WebstormProjects/ducklings-game/src/components/Game/components/Ducklings/Ducklings.tsx",["206","207","208"],"import React, {useEffect, useState} from \"react\";\nimport Duckling, {getDucklingRefKey} from \"./components/Duckling/Duckling\";\nimport {useDucklingsStore} from \"../../../../global/state/ducklings\";\nimport {getClosestDuckRefKey, getSortedDucklings} from \"./shared\";\n\nconst Ducklings: React.FC = () => {\n\n    const ducklings = useDucklingsStore(state => state.ducklings)\n\n    let sortedDucklings = getSortedDucklings(ducklings)\n\n    // const [toggle, setToggle] = useState(false)\n    //\n    // useEffect(() => {\n    //\n    //     setInterval(() => {\n    //         setToggle(state => !state)\n    //     }, 500)\n    //\n    // }, [])\n    //\n    // if (toggle) {\n    //     sortedDucklings.reverse()\n    // }\n\n    console.log('Ducklings render')\n\n    return (\n        <>\n            {\n                sortedDucklings.map((duck, index) => (\n                    <Duckling key={duck.id}\n                              id={duck.id}\n                              position={index}\n                              closestDuckRefKey={getClosestDuckRefKey(index, sortedDucklings)}\n                              initialX={0}\n                              initialY={-1.1 - (index * 0.75)}\n                    />\n                ))\n            }\n        </>\n    );\n};\n\nexport default Ducklings;","/Users/simonhales/WebstormProjects/ducklings-game/src/physics/components/Physics/Physics.tsx",["209","210","211","212"],"/Users/simonhales/WebstormProjects/ducklings-game/src/App.tsx",["213"],"import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Game from './components/Game/Game';\n\nfunction App() {\n  return (\n    <Game/>\n  );\n}\n\nexport default App;\n",["214","215"],"/Users/simonhales/WebstormProjects/ducklings-game/src/components/Game/components/Player/components/PlayerUIHelper/PlayerUIHelper.tsx",[],"/Users/simonhales/WebstormProjects/ducklings-game/src/physics/components/Physics/worker.ts",["216"],"/Users/simonhales/WebstormProjects/ducklings-game/src/physics/bodies.ts",[],"/Users/simonhales/WebstormProjects/ducklings-game/src/physics/collisions/data.ts",[],"/Users/simonhales/WebstormProjects/ducklings-game/src/components/Game/components/GameCanvas/GameCanvas.tsx",[],"/Users/simonhales/WebstormProjects/ducklings-game/src/components/Game/components/Camera/Camera.tsx",["217"],"import React, {useEffect, useRef} from \"react\";\nimport {useThree} from \"react-three-fiber\";\nimport {useFollow} from \"./hooks/useFollow\";\nimport {Group, PerspectiveCamera} from \"three\";\n\nconst Camera: React.FC = () => {\n\n    const groupRef = useRef<Group>(null as unknown as Group)\n    const cameraRef = useRef<PerspectiveCamera>(null as unknown as PerspectiveCamera)\n    const {setDefaultCamera} = useThree()\n\n    useFollow(groupRef)\n\n    useEffect(() => void setDefaultCamera(cameraRef.current), [])\n\n\n    return (\n        <group ref={groupRef}>\n            <perspectiveCamera ref={cameraRef} position={[0.75, 1.75, 30]} fov={20}>\n                <directionalLight position={[100, 100, 100]}\n                                  intensity={0.4}\n                                  castShadow\n                                  shadow-mapSize-width={2048}\n                                  shadow-mapSize-height={2048} />\n            </perspectiveCamera>\n        </group>\n    );\n};\n\nexport default Camera;","/Users/simonhales/WebstormProjects/ducklings-game/src/global/state/player.ts",[],"/Users/simonhales/WebstormProjects/ducklings-game/src/components/Game/components/Player/hooks/useController.ts",[],"/Users/simonhales/WebstormProjects/ducklings-game/src/workers/physics/types.ts",[],"/Users/simonhales/WebstormProjects/ducklings-game/src/physics/shared.ts",[],"/Users/simonhales/WebstormProjects/ducklings-game/src/components/Game/components/Ducklings/state/targets.ts",[],"/Users/simonhales/WebstormProjects/ducklings-game/src/workers/physics/index.ts",[],"/Users/simonhales/WebstormProjects/ducklings-game/src/workers/logic/index.ts",["218"],"/* eslint-disable no-restricted-globals */\n\nimport {logicAppState} from \"./components/LogicApp/LogicApp\";\n\n(self as any).$RefreshReg$ = () => {};\n(self as any).$RefreshSig$ = () => () => {};\n\nconst setWorker = require(\"./test\").setWorker\n\nlet physicsWorkerPort: MessagePort\n\nconst onMessageFromPhysicsWorker = (event: MessageEvent) => {\n    console.log(\"Worker 1 received a message from worker 2: \" + event.data);\n};\n\nconst selfWorker = self as unknown as Worker\n\nselfWorker.onmessage = (event: MessageEvent) => {\n\n    switch( event.data.command )\n    {\n        // Setup connection to worker 1\n        case \"connect\":\n            physicsWorkerPort = event.ports[0];\n            physicsWorkerPort.onmessage = onMessageFromPhysicsWorker;\n            physicsWorkerPort.postMessage(\"hey there!\")\n            setWorker(physicsWorkerPort as unknown as Worker)\n            return\n\n        // Forward messages to worker 1\n        case \"forward\":\n            // Forward messages to worker 1\n            physicsWorkerPort.postMessage( event.data.message );\n            return\n    }\n\n}\n\nselfWorker.postMessage(\"hey this is the logic worker...\")\n\nexport {}","/Users/simonhales/WebstormProjects/ducklings-game/src/physics/components/PhysicsProvider/PhysicsProvider.tsx",["219","220","221","222"],"/Users/simonhales/WebstormProjects/ducklings-game/src/components/Game/components/Inputs/Inputs.tsx",["223","224","225","226"],"/Users/simonhales/WebstormProjects/ducklings-game/src/components/Game/components/Player/state/inputs.ts",[],"/Users/simonhales/WebstormProjects/ducklings-game/src/components/Game/components/Ducklings/shared.ts",[],"/Users/simonhales/WebstormProjects/ducklings-game/src/components/Game/components/Player/hooks/usePhysics.ts",[],"/Users/simonhales/WebstormProjects/ducklings-game/src/physics/components/Physics/data.ts",[],"/Users/simonhales/WebstormProjects/ducklings-game/src/3d/Duck/Duck.tsx",[],"/Users/simonhales/WebstormProjects/ducklings-game/src/physics/components/PhysicsProvider/context.ts",[],{"ruleId":"227","replacedBy":"228"},{"ruleId":"229","replacedBy":"230"},{"ruleId":"231","severity":1,"message":"232","line":3,"column":9,"nodeType":"233","messageId":"234","endLine":3,"endColumn":18},{"ruleId":"231","severity":1,"message":"235","line":4,"column":9,"nodeType":"233","messageId":"234","endLine":4,"endColumn":16},{"ruleId":"231","severity":1,"message":"236","line":2,"column":27,"nodeType":"233","messageId":"234","endLine":2,"endColumn":36},{"ruleId":"231","severity":1,"message":"237","line":3,"column":9,"nodeType":"233","messageId":"234","endLine":3,"endColumn":14},{"ruleId":"231","severity":1,"message":"238","line":3,"column":16,"nodeType":"233","messageId":"234","endLine":3,"endColumn":24},{"ruleId":"231","severity":1,"message":"239","line":3,"column":7,"nodeType":"233","messageId":"234","endLine":3,"endColumn":24},{"ruleId":"231","severity":1,"message":"240","line":11,"column":7,"nodeType":"233","messageId":"234","endLine":11,"endColumn":31},{"ruleId":"241","severity":1,"message":"242","line":40,"column":8,"nodeType":"243","endLine":40,"endColumn":10,"suggestions":"244"},{"ruleId":"231","severity":1,"message":"245","line":42,"column":11,"nodeType":"233","messageId":"234","endLine":42,"endColumn":18},{"ruleId":"241","severity":1,"message":"246","line":50,"column":8,"nodeType":"243","endLine":50,"endColumn":42,"suggestions":"247"},{"ruleId":"241","severity":1,"message":"246","line":66,"column":8,"nodeType":"243","endLine":66,"endColumn":42,"suggestions":"248"},{"ruleId":"241","severity":1,"message":"249","line":101,"column":8,"nodeType":"243","endLine":101,"endColumn":14,"suggestions":"250"},{"ruleId":"231","severity":1,"message":"251","line":140,"column":9,"nodeType":"233","messageId":"234","endLine":140,"endColumn":22},{"ruleId":"231","severity":1,"message":"252","line":141,"column":9,"nodeType":"233","messageId":"234","endLine":141,"endColumn":25},{"ruleId":"241","severity":1,"message":"253","line":174,"column":8,"nodeType":"243","endLine":174,"endColumn":10,"suggestions":"254"},{"ruleId":"231","severity":1,"message":"255","line":22,"column":5,"nodeType":"233","messageId":"234","endLine":22,"endColumn":8},{"ruleId":"241","severity":1,"message":"256","line":91,"column":8,"nodeType":"243","endLine":91,"endColumn":18,"suggestions":"257"},{"ruleId":"241","severity":1,"message":"258","line":121,"column":8,"nodeType":"243","endLine":121,"endColumn":29,"suggestions":"259"},{"ruleId":"241","severity":1,"message":"260","line":187,"column":8,"nodeType":"243","endLine":187,"endColumn":67,"suggestions":"261"},{"ruleId":"241","severity":1,"message":"262","line":213,"column":8,"nodeType":"243","endLine":213,"endColumn":26,"suggestions":"263"},{"ruleId":"231","severity":1,"message":"264","line":217,"column":15,"nodeType":"233","messageId":"234","endLine":217,"endColumn":24},{"ruleId":"231","severity":1,"message":"265","line":292,"column":15,"nodeType":"233","messageId":"234","endLine":292,"endColumn":24},{"ruleId":"231","severity":1,"message":"266","line":293,"column":15,"nodeType":"233","messageId":"234","endLine":293,"endColumn":24},{"ruleId":"231","severity":1,"message":"267","line":350,"column":15,"nodeType":"233","messageId":"234","endLine":350,"endColumn":30},{"ruleId":"241","severity":1,"message":"268","line":364,"column":8,"nodeType":"243","endLine":364,"endColumn":57,"suggestions":"269"},{"ruleId":"241","severity":1,"message":"270","line":382,"column":8,"nodeType":"243","endLine":382,"endColumn":54,"suggestions":"271"},{"ruleId":"231","severity":1,"message":"272","line":2,"column":9,"nodeType":"233","messageId":"234","endLine":2,"endColumn":27},{"ruleId":"227","replacedBy":"273"},{"ruleId":"229","replacedBy":"274"},{"ruleId":"231","severity":1,"message":"275","line":8,"column":10,"nodeType":"233","messageId":"234","endLine":8,"endColumn":13},{"ruleId":"231","severity":1,"message":"276","line":9,"column":8,"nodeType":"233","messageId":"234","endLine":9,"endColumn":20},{"ruleId":"231","severity":1,"message":"277","line":10,"column":9,"nodeType":"233","messageId":"234","endLine":10,"endColumn":38},{"ruleId":"231","severity":1,"message":"276","line":8,"column":8,"nodeType":"233","messageId":"234","endLine":8,"endColumn":20},{"ruleId":"231","severity":1,"message":"236","line":1,"column":16,"nodeType":"233","messageId":"234","endLine":1,"endColumn":25},{"ruleId":"231","severity":1,"message":"278","line":1,"column":27,"nodeType":"233","messageId":"234","endLine":1,"endColumn":35},{"ruleId":"231","severity":1,"message":"279","line":2,"column":19,"nodeType":"233","messageId":"234","endLine":2,"endColumn":36},{"ruleId":"231","severity":1,"message":"280","line":1,"column":16,"nodeType":"233","messageId":"234","endLine":1,"endColumn":27},{"ruleId":"231","severity":1,"message":"281","line":5,"column":5,"nodeType":"233","messageId":"234","endLine":5,"endColumn":36},{"ruleId":"241","severity":1,"message":"282","line":24,"column":8,"nodeType":"243","endLine":24,"endColumn":10,"suggestions":"283"},{"ruleId":"241","severity":1,"message":"284","line":84,"column":8,"nodeType":"243","endLine":84,"endColumn":10,"suggestions":"285"},{"ruleId":"231","severity":1,"message":"286","line":2,"column":8,"nodeType":"233","messageId":"234","endLine":2,"endColumn":12},{"ruleId":"227","replacedBy":"287"},{"ruleId":"229","replacedBy":"288"},{"ruleId":"231","severity":1,"message":"289","line":3,"column":9,"nodeType":"233","messageId":"234","endLine":3,"endColumn":13},{"ruleId":"241","severity":1,"message":"290","line":14,"column":63,"nodeType":"243","endLine":14,"endColumn":65,"suggestions":"291"},{"ruleId":"231","severity":1,"message":"292","line":3,"column":9,"nodeType":"233","messageId":"234","endLine":3,"endColumn":22},{"ruleId":"241","severity":1,"message":"293","line":28,"column":8,"nodeType":"243","endLine":28,"endColumn":10,"suggestions":"294"},{"ruleId":"241","severity":1,"message":"293","line":35,"column":8,"nodeType":"243","endLine":35,"endColumn":10,"suggestions":"295"},{"ruleId":"241","severity":1,"message":"293","line":42,"column":8,"nodeType":"243","endLine":42,"endColumn":10,"suggestions":"296"},{"ruleId":"241","severity":1,"message":"293","line":49,"column":8,"nodeType":"243","endLine":49,"endColumn":10,"suggestions":"297"},{"ruleId":"231","severity":1,"message":"298","line":6,"column":9,"nodeType":"233","messageId":"234","endLine":6,"endColumn":17},{"ruleId":"241","severity":1,"message":"299","line":63,"column":8,"nodeType":"243","endLine":63,"endColumn":26,"suggestions":"300"},{"ruleId":"241","severity":1,"message":"299","line":73,"column":8,"nodeType":"243","endLine":73,"endColumn":26,"suggestions":"301"},{"ruleId":"241","severity":1,"message":"299","line":85,"column":8,"nodeType":"243","endLine":85,"endColumn":26,"suggestions":"302"},"no-native-reassign",["303"],"no-negated-in-lhs",["304"],"@typescript-eslint/no-unused-vars","'useTweaks' is defined but never used.","Identifier","unusedVar","'radians' is defined but never used.","'useEffect' is defined but never used.","'proxy' is defined but never used.","'useProxy' is defined but never used.","'ducklingPositions' is assigned a value but never used.","'ducklingDesiredPositions' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'applyAngle', 'buffers', 'isDynamic', 'ref', and 'uuid'. Either include them or remove the dependency array.","ArrayExpression",["305"],"'onFrame' is assigned a value but never used.","React Hook useCallback has a missing dependency: 'buffers'. Either include it or remove the dependency array.",["306"],["307"],"React Hook useMemo has missing dependencies: 'workerSetBody' and 'workerUpdateBody'. Either include them or remove the dependency array.",["308"],"'workerSetBody' is assigned a value but never used.","'workerUpdateBody' is assigned a value but never used.","React Hook useLayoutEffect has missing dependencies: 'cacheKey', 'onCollideEnd', 'onCollideStart', 'propsFn', 'ref', 'uuid', 'workerAddBody', and 'workerRemoveBody'. Either include them or remove the dependency array. If 'propsFn' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["309"],"'odd' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'clearTempTarget'. Either include it or remove the dependency array.",["310"],"React Hook useMemo has an unnecessary dependency: 'initChain'. Either exclude it or remove the dependency array.",["311"],"React Hook useCallback has a missing dependency: 'ref'. Either include it or remove the dependency array.",["312"],"React Hook useCallback has missing dependencies: 'ref' and 'setNewTempTarget'. Either include them or remove the dependency array.",["313"],"'tickDebug' is assigned a value but never used.","'xDiffCalc' is assigned a value but never used.","'yDiffCalc' is assigned a value but never used.","'currentDistance' is assigned a value but never used.","React Hook useCallback has missing dependencies: 'api', 'debug', 'extendedTargetRef', 'position', 'ref', and 'targetRef'. Either include them or remove the dependency array.",["314"],"React Hook useCallback has a missing dependency: 'followRefKey'. Either include it or remove the dependency array.",["315"],"'dynamicBodiesUuids' is defined but never used.",["303"],["304"],"'Box' is defined but never used.","'TargetHelper' is defined but never used.","'getDucklingTargetHelperRefKey' is defined but never used.","'useState' is defined but never used.","'getDucklingRefKey' is defined but never used.","'useCallback' is defined but never used.","'maxNumberOfDynamicPhysicObjects' is defined but never used.","React Hook useLayoutEffect has missing dependencies: 'gamePhysicsWorker' and 'logicWorker'. Either include them or remove the dependency array.",["316"],"React Hook useEffect has missing dependencies: 'buffers' and 'gamePhysicsWorker'. Either include them or remove the dependency array.",["317"],"'logo' is defined but never used.",["303"],["304"],"'wrap' is defined but never used.","React Hook useEffect has a missing dependency: 'setDefaultCamera'. Either include it or remove the dependency array.",["318"],"'logicAppState' is defined but never used.","React Hook useCallback has a missing dependency: 'worker'. Either include it or remove the dependency array.",["319"],["320"],["321"],["322"],"'Simulate' is defined but never used.","React Hook useCallback has unnecessary dependencies: 'centerX' and 'centerY'. Either exclude them or remove the dependency array.",["323"],["324"],["325"],"no-global-assign","no-unsafe-negation",{"desc":"326","fix":"327"},{"desc":"328","fix":"329"},{"desc":"328","fix":"330"},{"desc":"331","fix":"332"},{"desc":"333","fix":"334"},{"desc":"335","fix":"336"},{"desc":"337","fix":"338"},{"desc":"339","fix":"340"},{"desc":"341","fix":"342"},{"desc":"343","fix":"344"},{"desc":"345","fix":"346"},{"desc":"347","fix":"348"},{"desc":"349","fix":"350"},{"desc":"351","fix":"352"},{"desc":"353","fix":"354"},{"desc":"353","fix":"355"},{"desc":"353","fix":"356"},{"desc":"353","fix":"357"},{"desc":"358","fix":"359"},{"desc":"358","fix":"360"},{"desc":"358","fix":"361"},"Update the dependencies array to be: [applyAngle, buffers, isDynamic, ref, uuid]",{"range":"362","text":"363"},"Update the dependencies array to be: [isDynamic, ref, buffers, uuid, applyAngle]",{"range":"364","text":"365"},{"range":"366","text":"365"},"Update the dependencies array to be: [uuid, workerSetBody, workerUpdateBody]",{"range":"367","text":"368"},"Update the dependencies array to be: [cacheKey, onCollideEnd, onCollideStart, propsFn, ref, uuid, workerAddBody, workerRemoveBody]",{"range":"369","text":"370"},"Update the dependencies array to be: [clearTempTarget, position]",{"range":"371","text":"372"},"Update the dependencies array to be: [position]",{"range":"373","text":"374"},"Update the dependencies array to be: [tempTarget, tempPosition, ref, clearTempTarget, changePosition]",{"range":"375","text":"376"},"Update the dependencies array to be: [ducklingsInChain, ref, setNewTempTarget]",{"range":"377","text":"378"},"Update the dependencies array to be: [debug, ref, extendedTargetRef, api, targetRef, position, checkForCloserTarget, checkForCloseToTempTarget]",{"range":"379","text":"380"},"Update the dependencies array to be: [tempTarget, moveTowardsTarget, followRefKey, tempTargetKey]",{"range":"381","text":"382"},"Update the dependencies array to be: [gamePhysicsWorker, logicWorker]",{"range":"383","text":"384"},"Update the dependencies array to be: [buffers, gamePhysicsWorker]",{"range":"385","text":"386"},"Update the dependencies array to be: [setDefaultCamera]",{"range":"387","text":"388"},"Update the dependencies array to be: [worker]",{"range":"389","text":"390"},{"range":"391","text":"390"},{"range":"392","text":"390"},{"range":"393","text":"390"},"Update the dependencies array to be: []",{"range":"394","text":"395"},{"range":"396","text":"395"},{"range":"397","text":"395"},[1575,1577],"[applyAngle, buffers, isDynamic, ref, uuid]",[1901,1935],"[isDynamic, ref, buffers, uuid, applyAngle]",[2438,2472],[3573,3579],"[uuid, workerSetBody, workerUpdateBody]",[5500,5502],"[cacheKey, onCollideEnd, onCollideStart, propsFn, ref, uuid, workerAddBody, workerRemoveBody]",[3174,3184],"[clearTempTarget, position]",[4184,4205],"[position]",[6328,6387],"[tempTarget, tempPosition, ref, clearTempTarget, changePosition]",[7384,7402],"[ducklingsInChain, ref, setNewTempTarget]",[12231,12280],"[debug, ref, extendedTargetRef, api, targetRef, position, checkForCloserTarget, checkForCloseToTempTarget]",[12815,12861],"[tempTarget, moveTowardsTarget, followRefKey, tempTargetKey]",[950,952],"[gamePhysicsWorker, logicWorker]",[3091,3093],"[buffers, gamePhysicsWorker]",[497,499],"[setDefaultCamera]",[979,981],"[worker]",[1169,1171],[1351,1353],[1542,1544],[1923,1941],"[]",[2343,2361],[2989,3007]]